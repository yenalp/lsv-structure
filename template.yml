AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
  LsvQuestionAnswer:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: questionId
        AttributeType: S
      KeySchema:
      - AttributeName: questionId
        KeyType: HASH
      TableName: LsvQuestionAnswer
      BillingMode: PAY_PER_REQUEST
  LsvCreateQuestionAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs18.x
      CodeUri: lsv-create-question-answer
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvCreateQuestionAnswerExtendedRole
        - Arn
      Description: Create a question answer into a dymano table
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: LsvQuestionAnswer
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvCreateQuestionAnswerExtendedRole
  LsvGetQuestionAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs18.x
      CodeUri: lsv-get-question-anwsers
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvCreateQuestionAnswerExtendedRole
        - Arn
      Description:  Get a question answer into a dymano table
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: LsvQuestionAnswer
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvCreateQuestionAnswerExtendedRole
  lsvAuthenticatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs18.x
      CodeUri: lsv-authorizer
      Events: {}
      Description: Lsv Token Authenticator
      Environment:
        Variables:
          ACCESS_TOKEN: "test"
          SERVICE_VARIABLES: ACCESS_TOKEN
      Policies:
        - AWSCloudMapDiscoverInstanceAccess
  LsvCreateQuestionAnswerExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LsvExtendRoleInvokeFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - lambda:TagResource
            - lambda:UpdateFunctionCode
            Resource: "*"
  LsvApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Lsv Api Gateway
      Name: LsvApiGateway
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        AllowMethods:
          - POST
          - GET
          - PUT
        AllowOrigins:
          - https://admin.lsv.paullaney.com.au
          - https://lsv.paullaney.com.au
        ExposeHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        MaxAge: 200
  lsvCreateQuestionAnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvCreateQuestionAnswerPost
      RouteKey: POST /question-answer
      Target: !Join
        - /
        - - integrations
          - !Ref lsvCreateQuestionAnswerPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvCreateQuestionAnswerPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvCreateQuestionAnswerRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvCreateQuestionAnswerFunction.Arn
  lsvGetQuestionAnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvGetQuestionAnswerPost
      RouteKey: GET /question-answer
      Target: !Join
        - /
        - - integrations
          - !Ref lsvGetQuestionAnswerPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvGetQuestionAnswerPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvGetQuestionAnswerRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvGetQuestionAnswerFunction.Arn
  LsvApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LsvApiGatewayRole-InvokeFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - states:*
                Resource: '*'
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource: '*'
  LsvTokenAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      Name: LsvTokenAuthorizer
      ApiId: !Ref LsvApiGateway
      AuthorizerType: REQUEST
      AuthorizerCredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      AuthorizerPayloadFormatVersion: '2.0'
      IdentitySource:
        - $request.header.authorization
      AuthorizerUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt lsvAuthenticatorFunction.Arn
Outputs:
  BucketName:
    Value:
      Ref: S3Bucket
    Description: Name of the sample Amazon S3 bucket.
