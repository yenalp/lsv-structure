AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
  LsvQuestionAnswer:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: questionId
        AttributeType: S
      KeySchema:
      - AttributeName: questionId
        KeyType: HASH
      TableName: LsvQuestionAnswer
      BillingMode: PAY_PER_REQUEST
  LsvLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: LsvLoginFunction
      Runtime: nodejs18.x
      CodeUri: lsv-login
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvLoginExtendedRole
        - Arn
      Description: Signs a user up for cognito
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvLoginExtendedRole
  LsvSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: LsvSignUpFunction
      Runtime: nodejs18.x
      CodeUri: lsv-sign-up
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvSignUpExtendedRole
        - Arn
      Description: Signs a user up for cognito
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvSignUpExtendedRole
  LsvCreateQuestionAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: LsvCreateQuestionAnswerFunction
      Runtime: nodejs18.x
      CodeUri: lsv-create-question-answer
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvCreateQuestionAnswerExtendedRole
        - Arn
      Description: Create a question answer into a dymano table
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: LsvQuestionAnswer
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvCreateQuestionAnswerExtendedRole
  LsvSaveUsersQuestionAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: LsvSaveUsersQuestionAnswerFunction
      Runtime: nodejs18.x
      CodeUri: lsv-save-users-question-anwsers
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvSaveUsersQuestionAnswerExtendedRole
        - Arn
      Description:  Get a question answer into a dymano table
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: LsvQuestionAnswer
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvSaveUsersQuestionAnswerExtendedRole
  LsvGetQuestionAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: LsvGetQuestionAnswerFunction
      Runtime: nodejs18.x
      CodeUri: lsv-get-question-anwsers
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvCreateQuestionAnswerExtendedRole
        - Arn
      Description:  Get a question answer into a dymano table
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: LsvQuestionAnswer
      Policies:
      - AWSCloudMapDiscoverInstanceAccess
    DependsOn:
    - LsvCreateQuestionAnswerExtendedRole
  lsvAuthenticatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      FunctionName: lsvAuthenticatorFunction
      Description: Authenticator for lsv Gateway
      Environment:
      Runtime: nodejs18.x
      CodeUri: lsv-authorizer
      Events: {}
      Role:
        Fn::GetAtt:
        - LsvCreateQuestionAnswerExtendedRole
        - Arn
      Description: Lsv Token Authenticator
      Environment:
        Variables:
          ACCESS_TOKEN: "test"
          SERVICE_VARIABLES: ACCESS_TOKEN
      Policies:
        - AWSCloudMapDiscoverInstanceAccess
  LsvSaveUsersQuestionAnswerExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LsvExtendRoleInvokeFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - lambda:TagResource
            - lambda:UpdateFunctionCode
            - lambda:*
            Resource: "*"
  LsvCreateQuestionAnswerExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LsvExtendRoleInvokeFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
            - lambda:TagResource
            - lambda:UpdateFunctionCode
            - lambda:*
            Resource: "*"
  LsvLoginExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LsvExtendRoleLoginFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cognito-identity:*
            - lambda:*
            - cognito-idp:AdminInitiateAuth
            Resource: "*"
  LsvSignUpExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LsvExtendRoleSignUpFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cognito-identity:*
            - lambda:*
            - cognito-idp:AdminInitiateAuth
            Resource: "*"
  LsvApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Lsv Api Gateway
      Name: LsvApiGateway
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        AllowMethods:
          - POST
          - GET
          - PUT
          - OPTIONS
          - HEAD
        AllowOrigins:
          - https://admin.lsv.paullaney.com.au
          - https://lsv.paullaney.com.au
          - http://lsv-mckinnon.s3-website-ap-southeast-2.amazonaws.com
        ExposeHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        MaxAge: 200
  lsvSignUpRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvSignUpPost
      RouteKey: POST /sign-up
      Target: !Join
        - /
        - - integrations
          - !Ref lsvSignUpPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvSignUpPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvSignUpRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvSignUpFunction.Arn
  lsvLoginRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvLoginPost
      RouteKey: POST /login
      Target: !Join
        - /
        - - integrations
          - !Ref lsvLoginPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvLoginPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvLoginRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvLoginFunction.Arn
  lsvCreateQuestionAnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvCreateQuestionAnswerPost
      RouteKey: POST /question-answer
      Target: !Join
        - /
        - - integrations
          - !Ref lsvCreateQuestionAnswerPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvCreateQuestionAnswerPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvCreateQuestionAnswerRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvCreateQuestionAnswerFunction.Arn
  lsvSaveUsersQuestionAnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvSaveUsersQuestionAnswerPost
      RouteKey: POST /users-question-answer
      Target: !Join
        - /
        - - integrations
          - !Ref lsvSaveUsersQuestionAnswerPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvSaveUsersQuestionAnswerPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvSaveUsersQuestionAnswerRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvSaveUsersQuestionAnswerFunction.Arn
  lsvGetQuestionAnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref LsvApiGateway
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      OperationName: lsvGetQuestionAnswerPost
      RouteKey: GET /question-answer
      Target: !Join
        - /
        - - integrations
          - !Ref lsvGetQuestionAnswerPostPostIntegration
      AuthorizerId: !Ref LsvTokenAuthorizer
  lsvGetQuestionAnswerPostPostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LsvApiGateway
      CredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      ConnectionType: INTERNET
      Description: Integration for lsvGetQuestionAnswerRoute
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: '29000'
      IntegrationUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt LsvGetQuestionAnswerFunction.Arn
  LsvApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LsvApiGatewayRole-InvokeFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - states:*
                Resource: '*'
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource: '*'
  LsvTokenAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      Name: LsvTokenAuthorizer
      ApiId: !Ref LsvApiGateway
      AuthorizerType: REQUEST
      AuthorizerCredentialsArn: !GetAtt LsvApiGatewayRole.Arn
      AuthorizerPayloadFormatVersion: '2.0'
      IdentitySource:
        - $request.header.authorization
      AuthorizerUri: !Sub
        - >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction}/invocations
        - LambdaFunction: !GetAtt lsvAuthenticatorFunction.Arn
  LsvCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: LsvCognitoUserPool
      MfaConfiguration: 'OFF'
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !Sub
          - >-
            arn:aws:lambda:${AWS::Region}:627373841688:function:${LambdaFunction}
          - LambdaFunction: LsvCognitoPreSignUp
        PostConfirmation: !Sub
          - >-
            arn:aws:lambda:${AWS::Region}:627373841688:function:${LambdaFunction}
          - LambdaFunction: LsvCognitoPostConfirmation
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 1
  LsvCognitoPreSignUpPermissions:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LsvCognitoPreSignUp
      - LsvCognitoUserPool
    Properties:
      FunctionName: !GetAtt LsvCognitoPreSignUp.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt LsvCognitoUserPool.Arn
  LsvCognitoPreSignUpExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LsvCognitoPreSignUp-InvokeFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cognito-idp:*
                  - lambda:*
                Resource: '*'
  LsvCognitoPreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LsvCognitoPreSignUp
      Handler: index.handler
      Runtime: nodejs18.x
      InlineCode: |-
              exports.handler = async (event, context, callback) => {

                event.response = {
                  "autoConfirmUser": true,
                  "autoVerifyEmail": true
                };

                // Return to Amazon Cognito
                callback(null, event);

              };
      Timeout: 10
      Events: {}
      Role: !GetAtt LsvCognitoPreSignUpExtendedRole.Arn
  LsvCognitoPostConfirmationPermissionCognito:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LsvCognitoPostConfirmation
      - LsvCognitoUserPool
    Properties:
      FunctionName: !GetAtt LsvCognitoPostConfirmation.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt LsvCognitoUserPool.Arn
  LsvCognitoPostConfirmationExtendedRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LsvCognitoPostConfirmation-InvokeFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cognito-idp:AdminUpdateUserAttributes
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: '*'
  LsvCognitoPostConfirmation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LsvCognitoPostConfirmation
      Handler: index.handler
      Runtime: nodejs18.x
      InlineCode: |-
        import { CognitoIdentityProviderClient, AdminUpdateUserAttributesCommand } from "@aws-sdk/client-cognito-identity-provider";
        import { DynamoDBClient, PutItemCommand } from "@aws-sdk/client-dynamodb";

        const region = 'ap-southeast-2';
        const tableName = process.env.TABLE_NAME;

        export const handler = async (event, context, callback) => {

          const email = event["request"]["userAttributes"]["email"];
          const fullName = event["request"]["userAttributes"]["custom:full_name"];
          const uid = event["request"]["userAttributes"]["custom:uid"]
          const client = new CognitoIdentityProviderClient({
           region: region
          });

          const input = {
            UserPoolId: event.userPoolId, // required
            Username: event.userName, // required
            UserAttributes: [ // AttributeListType // required
              { // AttributeType
               Name: "email_verified",
               Value: "true"
              },
            ]
          };
          const command = new AdminUpdateUserAttributesCommand(input);

          try {
            const response = await client.send(command);

            const clientDyno = new DynamoDBClient({ region: region });
            const params = {
              TableName: tableName,
              Item: {
                "Id" : {S: uid},
                "fullname" : {S: fullName},
                "email" : {S: email},
                "completed-quiz": {S: "false"},
                "attempts" : {S: "0"}
                }
            };

            const commandDyno = new PutItemCommand(params);

            try {
              const data = await clientDyno.send(commandDyno);
              console.log("Post Confirmation:", response);
              console.log("Insert Item:", data);
              callback(null, event);
            } catch (error) {
              console.error("Insert Item:", error);
              callback(null, event);
            }

          } catch (error) {
            console.error("Post Confirmation:", error);
            callback(null, event);
          }

        };
      Timeout: 10
      Events: {}
      Role: !GetAtt LsvCognitoPostConfirmationExtendedRole.Arn
      Environment:
        Variables:
          TABLE_NAME: LsvCognitoUserDynamoDBTable
  LsvCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref LsvCognitoUserPool
      ClientName: LsvCognitoUserPoolClient
      GenerateSecret: false
      RefreshTokenValidity: 60
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      IdTokenValidity: 1
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - myapp://v22/auth/social/
      LogoutURLs:
        - movember://
  LsvCognitoUserPoolClientParameter:
    Type: AWS::SSM::Parameter
    DependsOn:
      - LsvCognitoUserPoolClient
    Properties:
      Name: /App/Movember/Cognito/Client/LsvCognitoUserPoolClient
      Type: String
      Value: !Ref LsvCognitoUserPoolClient
      Description: Lambda ARN for LsvCognitoUserPoolClient
  LsvCognitoUserDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LsvCognitoUserDynamoDBTable
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
Outputs:
  BucketName:
    Value:
      Ref: S3Bucket
    Description: Name of the sample Amazon S3 bucket.
